# Define the functions
f <- function(p) {
(1 - p)^2
}
g <- function(p) {
3.84 * p * (1 - p) * (1 / 20)
}
# Generate values for p
p_values <- seq(-0.3, 3, by = 0.01)  # Range of p values
# Compute the function values
f_values <- f(p_values)
g_values <- g(p_values)
# Plot the first function
plot(p_values, f_values, type = "l", col = "blue", lwd = 2,
ylim = c(0, max(f_values, g_values)),  # Dynamically scale the y-axis
main = "Plots of f(p) and g(p) with Cross Lines",
xlab = "p", ylab = "Function values")
# Add the second function to the same plot
lines(p_values, g_values, col = "red", lwd = 2)
# Draw cross lines at x=0 and y=0
abline(v = 0, col = "black", lty = 2, lwd = 1.5)  # Vertical line at x=0
abline(h = 0, col = "black", lty = 2, lwd = 1.5)  # Horizontal line at y=0
# Add a le
# Define the functions
f <- function(p) {
(0.4 - p)^2
}
g <- function(p) {
3.84 * p * (1 - p) * (1 / 20)
}
# Generate values for p
p_values <- seq(-0.3, 3, by = 0.01)  # Range of p values
# Compute the function values
f_values <- f(p_values)
g_values <- g(p_values)
# Plot the first function
plot(p_values, f_values, type = "l", col = "blue", lwd = 2,
ylim = c(0, max(f_values, g_values)),  # Dynamically scale the y-axis
main = "Plots of f(p) and g(p) with Cross Lines",
xlab = "p", ylab = "Function values")
# Add the second function to the same plot
lines(p_values, g_values, col = "red", lwd = 2)
# Draw cross lines at x=0 and y=0
abline(v = 0, col = "black", lty = 2, lwd = 1.5)  # Vertical line at x=0
abline(h = 0, col = "black", lty = 2, lwd = 1.5)  # Horizontal line at y=0
# Add a le
# Define the functions
f <- function(p) {
(0.4 - p)^2
}
g <- function(p) {
3.84 * p * (1 - p) * (1 / 20)
}
# Generate values for p
p_values <- seq(-0.3, 1, by = 0.01)  # Range of p values
# Compute the function values
f_values <- f(p_values)
g_values <- g(p_values)
# Plot the first function
plot(p_values, f_values, type = "l", col = "blue", lwd = 2,
ylim = c(0, max(f_values, g_values)),  # Dynamically scale the y-axis
main = "Plots of f(p) and g(p) with Cross Lines",
xlab = "p", ylab = "Function values")
# Add the second function to the same plot
lines(p_values, g_values, col = "red", lwd = 2)
# Draw cross lines at x=0 and y=0
abline(v = 0, col = "black", lty = 2, lwd = 1.5)  # Vertical line at x=0
abline(h = 0, col = "black", lty = 2, lwd = 1.5)  # Horizontal line at y=0
# Add a le
# Define the functions
f <- function(p) {
(0.4 - p)^2
}
g <- function(p) {
3.84 * p * (1 - p) * (1 / 20)
}
# Generate values for p
p_values <- seq(-0.1, 1, by = 0.01)  # Range of p values
# Compute the function values
f_values <- f(p_values)
g_values <- g(p_values)
# Plot the first function
plot(p_values, f_values, type = "l", col = "blue", lwd = 2,
ylim = c(0, max(f_values, g_values)),  # Dynamically scale the y-axis
main = "Plots of f(p) and g(p) with Cross Lines",
xlab = "p", ylab = "Function values")
# Add the second function to the same plot
lines(p_values, g_values, col = "red", lwd = 2)
# Draw cross lines at x=0 and y=0
abline(v = 0, col = "black", lty = 2, lwd = 1.5)  # Vertical line at x=0
abline(h = 0, col = "black", lty = 2, lwd = 1.5)  # Horizontal line at y=0
# Add a le
# Define the functions
f <- function(p) {
(0.4 - p)^2
}
g <- function(p) {
3.84 * p * (1 - p) * (1 / 20)
}
h <- function(p) {
3.84 * p * (1 - p) * (1 / 40)
}
# Generate values for p
p_values <- seq(-0.1, 1, by = 0.01)  # Range of p values
# Compute the function values
f_values <- f(p_values)
g_values <- g(p_values)
h_values <- h(p_values)
# Plot the first function
plot(p_values, f_values, type = "l", col = "blue", lwd = 2,
ylim = c(0, max(f_values, g_values)),  # Dynamically scale the y-axis
main = "Plots of f(p) and g(p) with Cross Lines",
xlab = "p", ylab = "Function values")
# Add the second function to the same plot
lines(p_values, g_values, col = "red", lwd = 2)
lines(p_values, h_values, col = "green", lwd = 2)
# Draw cross lines at x=0 and y=0
abline(v = 0, col = "black", lty = 2, lwd = 1.5)  # Vertical line at x=0
abline(h = 0, col = "black", lty = 2, lwd = 1.5)  # Horizontal line at y=0
# Add a le
# Define the functions
f <- function(p) {
(0.4 - p)^2
}
g <- function(p) {
3.84 * p * (1 - p) * (1 / 20)
}
h <- function(p) {
3.84 * p * (1 - p) * (1 / 40)
}
# Generate values for p
p_values <- seq(-0.1, 1, by = 0.01)  # Range of p values
# Compute the function values
f_values <- f(p_values)
g_values <- g(p_values)
h_values <- h(p_values)
# Plot the first function
plot(p_values, f_values, type = "l", col = "blue", lwd = 2,
ylim = c(0, max(f_values, g_values)),  # Dynamically scale the y-axis
main = "",
xlab = "p", ylab = "Function values")
# Add the second function to the same plot
lines(p_values, g_values, col = "red", lwd = 2)
lines(p_values, h_values, col = "green", lwd = 2)
# Draw cross lines at x=0 and y=0
abline(v = 0, col = "black", lty = 2, lwd = 1.5)  # Vertical line at x=0
abline(h = 0, col = "black", lty = 2, lwd = 1.5)  # Horizontal line at y=0
# Add a le
# Define the functions
f <- function(p) {
(0.2 - p)^2
}
g <- function(p) {
3.84 * p * (1 - p) * (1 / 20)
}
h <- function(p) {
3.84 * p * (1 - p) * (1 / 40)
}
# Generate values for p
p_values <- seq(-0.1, 1, by = 0.01)  # Range of p values
# Compute the function values
f_values <- f(p_values)
g_values <- g(p_values)
h_values <- h(p_values)
# Plot the first function
plot(p_values, f_values, type = "l", col = "blue", lwd = 2,
ylim = c(0, max(f_values, g_values)),  # Dynamically scale the y-axis
main = "",
xlab = "p", ylab = "Function values")
# Add the second function to the same plot
lines(p_values, g_values, col = "red", lwd = 2)
lines(p_values, h_values, col = "green", lwd = 2)
# Draw cross lines at x=0 and y=0
abline(v = 0, col = "black", lty = 2, lwd = 1.5)  # Vertical line at x=0
abline(h = 0, col = "black", lty = 2, lwd = 1.5)  # Horizontal line at y=0
# Add a le
# Define the functions
f <- function(p) {
(0.3 - p)^2
}
g <- function(p) {
3.84 * p * (1 - p) * (1 / 20)
}
h <- function(p) {
3.84 * p * (1 - p) * (1 / 40)
}
# Generate values for p
p_values <- seq(-0.1, 1, by = 0.01)  # Range of p values
# Compute the function values
f_values <- f(p_values)
g_values <- g(p_values)
h_values <- h(p_values)
# Plot the first function
plot(p_values, f_values, type = "l", col = "blue", lwd = 2,
ylim = c(0, max(f_values, g_values)),  # Dynamically scale the y-axis
main = "",
xlab = "p", ylab = "Function values")
# Add the second function to the same plot
lines(p_values, g_values, col = "red", lwd = 2)
lines(p_values, h_values, col = "green", lwd = 2)
# Draw cross lines at x=0 and y=0
abline(v = 0, col = "black", lty = 2, lwd = 1.5)  # Vertical line at x=0
abline(h = 0, col = "black", lty = 2, lwd = 1.5)  # Horizontal line at y=0
# Add a le
# Define the functions
f <- function(p) {
(0.3 - p)^2
}
g <- function(p) {
3.84 * p * (1 - p) * (1 / 20)
}
h <- function(p) {
3.84 * p * (1 - p) * (1 / 40)
}
# Generate values for p
p_values <- seq(-0.05, 0.8, by = 0.01)  # Range of p values
# Compute the function values
f_values <- f(p_values)
g_values <- g(p_values)
h_values <- h(p_values)
# Plot the first function
plot(p_values, f_values, type = "l", col = "blue", lwd = 2,
ylim = c(0, max(f_values, g_values)),  # Dynamically scale the y-axis
main = "",
xlab = "p", ylab = "Function values")
# Add the second function to the same plot
lines(p_values, g_values, col = "red", lwd = 2)
lines(p_values, h_values, col = "green", lwd = 2)
# Draw cross lines at x=0 and y=0
abline(v = 0, col = "black", lty = 2, lwd = 1.5)  # Vertical line at x=0
abline(h = 0, col = "black", lty = 2, lwd = 1.5)  # Horizontal line at y=0
# Add a le
# Define the functions
f <- function(p) {
(0.2 - p)^2
}
g <- function(p) {
3.84 * p * (1 - p) * (1 / 20)
}
h <- function(p) {
3.84 * p * (1 - p) * (1 / 40)
}
# Generate values for p
p_values <- seq(-0.05, 0.6, by = 0.01)  # Range of p values
# Compute the function values
f_values <- f(p_values)
g_values <- g(p_values)
h_values <- h(p_values)
# Plot the first function
plot(p_values, f_values, type = "l", col = "blue", lwd = 2,
ylim = c(0, max(f_values, g_values)),  # Dynamically scale the y-axis
main = "",
xlab = "p", ylab = "Function values")
# Add the second function to the same plot
lines(p_values, g_values, col = "red", lwd = 2)
lines(p_values, h_values, col = "green", lwd = 2)
# Draw cross lines at x=0 and y=0
abline(v = 0, col = "black", lty = 2, lwd = 1.5)  # Vertical line at x=0
abline(h = 0, col = "black", lty = 2, lwd = 1.5)  # Horizontal line at y=0
# Add a le
# Define the functions
f <- function(p) {
(0.5 - p)^2
}
g <- function(p) {
3.84 * p * (1 - p) * (1 / 20)
}
h <- function(p) {
3.84 * p * (1 - p) * (1 / 40)
}
# Generate values for p
p_values <- seq(-0.1, 1.2, by = 0.01)  # Range of p values
# Compute the function values
f_values <- f(p_values)
g_values <- g(p_values)
h_values <- h(p_values)
# Plot the first function
plot(p_values, f_values, type = "l", col = "blue", lwd = 2,
ylim = c(0, max(f_values, g_values)),  # Dynamically scale the y-axis
main = "",
xlab = "p", ylab = "Function values")
# Add the second function to the same plot
lines(p_values, g_values, col = "red", lwd = 2)
lines(p_values, h_values, col = "green", lwd = 2)
# Draw cross lines at x=0 and y=0
abline(v = 0, col = "black", lty = 2, lwd = 1.5)  # Vertical line at x=0
abline(h = 0, col = "black", lty = 2, lwd = 1.5)  # Horizontal line at y=0
# Add a le
# Define the functions
f <- function(p) {
(0.8 - p)^2
}
g <- function(p) {
3.84 * p * (1 - p) * (1 / 20)
}
h <- function(p) {
3.84 * p * (1 - p) * (1 / 40)
}
# Generate values for p
p_values <- seq(-0.1, 1.5, by = 0.01)  # Range of p values
# Compute the function values
f_values <- f(p_values)
g_values <- g(p_values)
h_values <- h(p_values)
# Plot the first function
plot(p_values, f_values, type = "l", col = "blue", lwd = 2,
ylim = c(0, max(f_values, g_values)),  # Dynamically scale the y-axis
main = "",
xlab = "p", ylab = "Function values")
# Add the second function to the same plot
lines(p_values, g_values, col = "red", lwd = 2)
lines(p_values, h_values, col = "green", lwd = 2)
# Draw cross lines at x=0 and y=0
abline(v = 0, col = "black", lty = 2, lwd = 1.5)  # Vertical line at x=0
abline(h = 0, col = "black", lty = 2, lwd = 1.5)  # Horizontal line at y=0
# Add a le
# Define the functions
f <- function(p) {
(0.8 - p)^2
}
g <- function(p) {
3.84 * p * (1 - p) * (1 / 20)
}
h <- function(p) {
3.84 * p * (1 - p) * (1 / 40)
}
# Generate values for p
p_values <- seq(0, 1.5, by = 0.01)  # Range of p values
# Compute the function values
f_values <- f(p_values)
g_values <- g(p_values)
h_values <- h(p_values)
# Plot the first function
plot(p_values, f_values, type = "l", col = "blue", lwd = 2,
ylim = c(0, max(f_values, g_values)),  # Dynamically scale the y-axis
main = "",
xlab = "p", ylab = "Function values")
# Add the second function to the same plot
lines(p_values, g_values, col = "red", lwd = 2)
lines(p_values, h_values, col = "green", lwd = 2)
# Draw cross lines at x=0 and y=0
abline(v = 0, col = "black", lty = 2, lwd = 1.5)  # Vertical line at x=0
abline(h = 0, col = "black", lty = 2, lwd = 1.5)  # Horizontal line at y=0
# Add a le
# Define the functions
f <- function(p) {
(0.8 - p)^2
}
g <- function(p) {
3.84 * p * (1 - p) * (1 / 20)
}
h <- function(p) {
3.84 * p * (1 - p) * (1 / 40)
}
# Generate values for p
p_values <- seq(0, 1.2, by = 0.01)  # Range of p values
# Compute the function values
f_values <- f(p_values)
g_values <- g(p_values)
h_values <- h(p_values)
# Plot the first function
plot(p_values, f_values, type = "l", col = "blue", lwd = 2,
ylim = c(0, max(f_values, g_values)),  # Dynamically scale the y-axis
main = "",
xlab = "p", ylab = "Function values")
# Add the second function to the same plot
lines(p_values, g_values, col = "red", lwd = 2)
lines(p_values, h_values, col = "green", lwd = 2)
# Draw cross lines at x=0 and y=0
abline(v = 0, col = "black", lty = 2, lwd = 1.5)  # Vertical line at x=0
abline(h = 0, col = "black", lty = 2, lwd = 1.5)  # Horizontal line at y=0
# Add a le
# Define the functions
f <- function(p) {
(0.8 - p)^2
}
g <- function(p) {
3.84 * p * (1 - p) * (1 / 20)
}
h <- function(p) {
3.84 * p * (1 - p) * (1 / 40)
}
# Generate values for p
p_values <- seq(0.1, 1.2, by = 0.01)  # Range of p values
# Compute the function values
f_values <- f(p_values)
g_values <- g(p_values)
h_values <- h(p_values)
# Plot the first function
plot(p_values, f_values, type = "l", col = "blue", lwd = 2,
ylim = c(0, max(f_values, g_values)),  # Dynamically scale the y-axis
main = "",
xlab = "p", ylab = "Function values")
# Add the second function to the same plot
lines(p_values, g_values, col = "red", lwd = 2)
lines(p_values, h_values, col = "green", lwd = 2)
# Draw cross lines at x=0 and y=0
abline(v = 0, col = "black", lty = 2, lwd = 1.5)  # Vertical line at x=0
abline(h = 0, col = "black", lty = 2, lwd = 1.5)  # Horizontal line at y=0
# Add a le
# Define the functions
f <- function(p) {
(0.8 - p)^2
}
g <- function(p) {
3.84 * p * (1 - p) * (1 / 20)
}
h <- function(p) {
3.84 * p * (1 - p) * (1 / 40)
}
# Generate values for p
p_values <- seq(0.3, 1.2, by = 0.01)  # Range of p values
# Compute the function values
f_values <- f(p_values)
g_values <- g(p_values)
h_values <- h(p_values)
# Plot the first function
plot(p_values, f_values, type = "l", col = "blue", lwd = 2,
ylim = c(0, max(f_values, g_values)),  # Dynamically scale the y-axis
main = "",
xlab = "p", ylab = "Function values")
# Add the second function to the same plot
lines(p_values, g_values, col = "red", lwd = 2)
lines(p_values, h_values, col = "green", lwd = 2)
# Draw cross lines at x=0 and y=0
abline(v = 0, col = "black", lty = 2, lwd = 1.5)  # Vertical line at x=0
abline(h = 0, col = "black", lty = 2, lwd = 1.5)  # Horizontal line at y=0
# Add a le
# Define the functions
f <- function(p) {
(0.2 - p)^2
}
g <- function(p) {
3.84 * p * (1 - p) * (1 / 20)
}
h <- function(p) {
3.84 * p * (1 - p) * (1 / 40)
}
# Generate values for p
p_values <- seq(-0.05, 0.6, by = 0.01)  # Range of p values
# Compute the function values
f_values <- f(p_values)
g_values <- g(p_values)
h_values <- h(p_values)
# Plot the first function
plot(p_values, f_values, type = "l", col = "blue", lwd = 2,
ylim = c(0, max(f_values, g_values)),  # Dynamically scale the y-axis
main = "",
xlab = "p", ylab = "Function values")
# Add the second function to the same plot
lines(p_values, g_values, col = "red", lwd = 2)
lines(p_values, h_values, col = "green", lwd = 2)
# Draw cross lines at x=0 and y=0
abline(v = 0, col = "black", lty = 2, lwd = 1.5)  # Vertical line at x=0
abline(h = 0, col = "black", lty = 2, lwd = 1.5)  # Horizontal line at y=0
# Add a le
# Define the functions
f <- function(p) {
(0.5 - p)^2
}
g <- function(p) {
3.84 * p * (1 - p) * (1 / 20)
}
h <- function(p) {
3.84 * p * (1 - p) * (1 / 40)
}
# Generate values for p
p_values <- seq(-0.1, 1.2, by = 0.01)  # Range of p values
# Compute the function values
f_values <- f(p_values)
g_values <- g(p_values)
h_values <- h(p_values)
# Plot the first function
plot(p_values, f_values, type = "l", col = "blue", lwd = 2,
ylim = c(0, max(f_values, g_values)),  # Dynamically scale the y-axis
main = "",
xlab = "p", ylab = "Function values")
# Add the second function to the same plot
lines(p_values, g_values, col = "red", lwd = 2)
lines(p_values, h_values, col = "green", lwd = 2)
# Draw cross lines at x=0 and y=0
abline(v = 0, col = "black", lty = 2, lwd = 1.5)  # Vertical line at x=0
abline(h = 0, col = "black", lty = 2, lwd = 1.5)  # Horizontal line at y=0
# Add a le
# Define the functions
f <- function(p) {
(0.8 - p)^2
}
g <- function(p) {
3.84 * p * (1 - p) * (1 / 20)
}
h <- function(p) {
3.84 * p * (1 - p) * (1 / 40)
}
# Generate values for p
p_values <- seq(0.3, 1.2, by = 0.01)  # Range of p values
# Compute the function values
f_values <- f(p_values)
g_values <- g(p_values)
h_values <- h(p_values)
# Plot the first function
plot(p_values, f_values, type = "l", col = "blue", lwd = 2,
ylim = c(0, max(f_values, g_values)),  # Dynamically scale the y-axis
main = "",
xlab = "p", ylab = "Function values")
# Add the second function to the same plot
lines(p_values, g_values, col = "red", lwd = 2)
lines(p_values, h_values, col = "green", lwd = 2)
# Draw cross lines at x=0 and y=0
abline(v = 0, col = "black", lty = 2, lwd = 1.5)  # Vertical line at x=0
abline(h = 0, col = "black", lty = 2, lwd = 1.5)  # Horizontal line at y=0
# Add a le
